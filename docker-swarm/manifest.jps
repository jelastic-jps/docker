type: install
id: docker-swarm-ce
version: 1.7
baseUrl: https://raw.githubusercontent.com/jelastic-jps/docker/master/docker-swarm
description:
  text: /text/description.md
  short: Docker Swarm Cluster with out-of-box auto-clustering and auto-scaling
categories:
  - apps/clusters
  - apps/dev-and-admin-tools
logo: ../images/docker-swarm-logo-89x70.png
name: Docker Swarm Cluster
targetRegions:
  type: vz7

globals:
  startPage: http://${env.domain}/

onBeforeInit: |

  function err(e, text, cur, override){
    var m = (e.quota.description || e.quota.name) + " - " + e.value + ", " + text + " - " + cur + ". ";
    if (override) markup = m; else markup += m;
  }

  var minNodesCount = 2, 
      minSameNodesCount = 1,
      markup = "", cur = null, text = "used", install = true, warning = false;
  var settings = jps.settings;
  var fields = settings.fields;
  var quotas = jelastic.billing.account.GetQuotas('environment.maxnodescount' + ";" + 'environment.maxsamenodescount').array;
  for (var i = 0; i < quotas.length; i++){
    var q = quotas[i], n = toNative(q.quota.name);
    if (n == 'environment.maxnodescount' && q.value < minNodesCount) {
      err(q, "required", minNodesCount, true);
      install = false; break;
    };
    if (n == 'environment.maxsamenodescount' && q.value < minSameNodesCount) {
      if (!markup) err(q, "required", minSameNodesCount, true);
      install = false; break;
    };
    if (n == 'environment.maxsamenodescount' && q.value < 10) warning = true;
  }
  if (!install) {
    for (var i = 0; i < fields.length; i++) fields[i].disabled = true;
    fields[4].markup = "Topology is not available. " + markup + "Please upgrade your account.";
    fields[4].hidden = false;
    fields[4].disabled = false;
    fields.push(
      {"type": "compositefield","height": 0,"hideLabel": true,"width": 0,"items": [{"height": 0,"type": "string","required": true}]}
    );
  }
  if (warning) {
    fields[4].markup = "If the specified nodes' count exceeds the account limitations it will be automatically reduced during the creation.";
    fields[4].hidden = false;
    fields[4].disabled = false;
  }  
  
  return { result: 0, settings: settings };
  
settings: 
  fields:  
  - type: nodetags      
    nodeType: dockerengine
    caption: Docker Version
    name: tag  
    width: 100
  - type: spinner
    name: mngr
    caption: Manager Nodes
    min: 1
    max: 5
    default: 1
    increment: 2
  - type: spinner
    name: worker
    caption: Worker Nodes
    min: 1
    max: 10
    default: 1
    
  - name: stack
    type: radio-fieldset
    values:
      clean: Clean Cluster
      deploy: Deploy Stack YML
    default: clean
    showIf:
      deploy:
        - name: yml
          type: string
          caption: Stack YML URL
          default: https://github.com/jelastic/example-voting-app/blob/master/docker-stack.yml
          required: true
          vtype: url
        - name: stackName
          type: string
          caption: Stack Name
          default: example
          required: true
        - name: preHook
          type: string
          caption: Pre Hook
          inputType: hidden

      clean:
        name: portainer
        type: checkbox
        caption: Install <a href='https://portainer.io' target='_blank'>Portainer UI</a> and Let's Encrypt SSL certificates
        value: false

  - type: displayfield
    name: displayfield
    cls: warning
    height: 30
    hideLabel: true
    hidden: true
    required: true
    markup:

nodes:
  - count: ${settings.mngr}
    cloudlets: 32
    nodeType: dockerengine
    tag: ${settings.tag}
    nodeGroup: cp
    displayName: Manager
    startServiceOnCreation: false
    env:
      JELASTIC_EXPOSE: false
    
  - count: ${settings.worker}
    nodeGroup: worker
    nodeType: dockerengine
    tag: ${settings.tag}
    displayName: Worker
    startServiceOnCreation: false
    cloudlets: 32
    env:
      JELASTIC_EXPOSE: false

skipNodeEmails: true
 
onInstall:
  - addExtIp
  - install: /addons/docker-swarm-init.jps?_r=${fn.random}
  - if ('${settings.stack}' == 'deploy'): deploy
  - portainer
  - get-tokens

#onBeforeClone: stopEvent
#onBeforeMigrate: stopEvent
  
actions:
  deploy:
    - install:
        jps: ../addons/docker-deploy.jps?_r=${fn.random}
        settings:
          yml: ${settings.yml}
          stackName: ${settings.stackName}
          type: stackName
          preHook: ${settings.preHook}
 
    - if ('${settings.yml}'.indexOf('/openfaas/') > -1):
        setGlobals:
          startPage: http://${env.domain}:8080/

    - if ('${settings.yml}'.indexOf('/example-voting-app/') > -1):
        setGlobals:
          startPage: http://${env.domain}:5000/

  portainer:
    if ('${settings.portainer}' == 'true'):
      - script: |
          resp = jelastic.billing.account.GetQuotas(appid, session, ['environment.externalip.enabled', 'environment.externalip.maxcount', 'environment.externalip.maxcount.per.node'].join(";"))
          if (resp.result != 0) return resp; 
          port = resp.array[0].value && resp.array[1].value && resp.array[2].value ? 443: 4848;
          return {result:0, onAfterReturn:{setGlobals:{port:port}}}
      - install:
          jps: ../addons/portainer.jps?_r=${fn.random}
          settings:
            mode: swarm
            port: ${globals.port}
      - setGlobals:
          startPage: https://${env.domain}:${globals.port}/

  addExtIp:
    script: ../addons/scripts/attach-external-ip.js?_r=${fn.random}

  get-tokens: 
    - cmd[${nodes.cp.master.id}]: docker swarm join-token -q manager
    - setGlobals:
        manager-token: ${response.out}        
    - cmd[${nodes.cp.master.id}]: docker swarm join-token -q worker
    - setGlobals:
        worker-token: ${response.out}

startPage: ${globals.startPage}      
success: /text/success.md
